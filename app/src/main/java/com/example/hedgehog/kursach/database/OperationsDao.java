package com.example.hedgehog.kursach.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "OPERATIONS".
 */
public class OperationsDao extends AbstractDao<Operations, Long> {

    public static final String TABLENAME = "OPERATIONS";

    /**
     * Properties of entity Operations.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OperationId = new Property(0, Long.class, "operationId", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
    }


    public OperationsDao(DaoConfig config) {
        super(config);
    }

    public OperationsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: operationId
                "\"DESCRIPTION\" TEXT NOT NULL );"); // 1: description
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATIONS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Operations entity) {
        stmt.clearBindings();

        Long operationId = entity.getOperationId();
        if (operationId != null) {
            stmt.bindLong(1, operationId);
        }
        stmt.bindString(2, entity.getDescription());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Operations entity) {
        stmt.clearBindings();

        Long operationId = entity.getOperationId();
        if (operationId != null) {
            stmt.bindLong(1, operationId);
        }
        stmt.bindString(2, entity.getDescription());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Operations readEntity(Cursor cursor, int offset) {
        Operations entity = new Operations( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // operationId
                cursor.getString(offset + 1) // description
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Operations entity, int offset) {
        entity.setOperationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.getString(offset + 1));
    }

    @Override
    protected final Long updateKeyAfterInsert(Operations entity, long rowId) {
        entity.setOperationId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Operations entity) {
        if (entity != null) {
            return entity.getOperationId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Operations entity) {
        return entity.getOperationId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
