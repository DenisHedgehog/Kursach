package com.example.hedgehog.kursach.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FILMS".
 */
public class FilmsDao extends AbstractDao<Films, Long> {

    public static final String TABLENAME = "FILMS";

    /**
     * Properties of entity Films.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Descriprion = new Property(2, String.class, "descriprion", false, "DESCRIPRION");
        public final static Property Duration = new Property(3, int.class, "duration", false, "DURATION");
        public final static Property AgeLimit = new Property(4, int.class, "ageLimit", false, "AGE_LIMIT");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
    }


    public FilmsDao(DaoConfig config) {
        super(config);
    }

    public FilmsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"DESCRIPRION\" TEXT NOT NULL ," + // 2: descriprion
                "\"DURATION\" INTEGER NOT NULL ," + // 3: duration
                "\"AGE_LIMIT\" INTEGER NOT NULL ," + // 4: ageLimit
                "\"PRICE\" INTEGER NOT NULL );"); // 5: price
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Films entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getDescriprion());
        stmt.bindLong(4, entity.getDuration());
        stmt.bindLong(5, entity.getAgeLimit());
        stmt.bindLong(6, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Films entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getDescriprion());
        stmt.bindLong(4, entity.getDuration());
        stmt.bindLong(5, entity.getAgeLimit());
        stmt.bindLong(6, entity.getPrice());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Films readEntity(Cursor cursor, int offset) {
        Films entity = new Films( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // name
                cursor.getString(offset + 2), // descriprion
                cursor.getInt(offset + 3), // duration
                cursor.getInt(offset + 4), // ageLimit
                cursor.getInt(offset + 5) // price
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Films entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setDescriprion(cursor.getString(offset + 2));
        entity.setDuration(cursor.getInt(offset + 3));
        entity.setAgeLimit(cursor.getInt(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
    }

    @Override
    protected final Long updateKeyAfterInsert(Films entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Films entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Films entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
